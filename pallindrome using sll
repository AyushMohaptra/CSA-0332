#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char data;
    struct Node* next;
};

// Create a new node
struct Node* createNode(char ch) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = ch;
    newNode->next = NULL;
    return newNode;
}

// Insert at end
struct Node* insertEnd(struct Node* head, char ch) {
    struct Node* newNode = createNode(ch);
    if (!head) return newNode;
    struct Node* temp = head;
    while (temp->next)
        temp = temp->next;
    temp->next = newNode;
    return head;
}

// Reverse the linked list
struct Node* reverseList(struct Node* head) {
    struct Node* prev = NULL, *curr = head, *next;
    while (curr) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

// Compare two lists
int compareLists(struct Node* head1, struct Node* head2) {
    while (head1 && head2) {
        if (head1->data != head2->data)
            return 0;
        head1 = head1->next;
        head2 = head2->next;
    }
    return 1;
}

int main() {
    char str[100];
    printf("Enter a string: ");
    scanf("%s", str);

    struct Node* head = NULL;
    for (int i = 0; str[i] != '\0'; i++)
        head = insertEnd(head, str[i]);

    // Copy original list
    struct Node* copy = NULL;
    struct Node* temp = head;
    while (temp) {
        copy = insertEnd(copy, temp->data);
        temp = temp->next;
    }

    // Reverse the original and compare
    struct Node* rev = reverseList(head);

    if (compareLists(copy, rev))
        printf("Palindrome\n");
    else
        printf("Not Palindrome\n");

    return 0;
}
