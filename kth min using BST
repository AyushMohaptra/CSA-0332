#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert into BST
struct Node* insert(struct Node* root, int data) {
    if (root == NULL)
        return createNode(data);
    if (data < root->data)
        root->left = insert(root->left, data);
    else
        root->right = insert(root->right, data);
    return root;
}

// Inorder traversal to find k-th minimum
void kthMin(struct Node* root, int k, int* count, int* result) {
    if (root == NULL || *count >= k)
        return;
    kthMin(root->left, k, count, result);
    (*count)++;
    if (*count == k)
        *result = root->data;
    kthMin(root->right, k, count, result);
}

int main() {
    struct Node* root = NULL;
    int arr[] = {20, 8, 22, 4, 12, 10, 14};
    int n = sizeof(arr) / sizeof(arr[0]);
    for (int i = 0; i < n; i++)
        root = insert(root, arr[i]);

    int k = 3;
    int count = 0, result = -1;
    kthMin(root, k, &count, &result);

    if (result != -1)
        printf("%d-th minimum value is %d\n", k, result);
    else
        printf("Less than %d nodes in the tree\n", k);

    return 0;
}
